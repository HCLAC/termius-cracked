import { __extends } from "tslib";
import { eventFromException, eventFromMessage } from '@sentry/browser';
import { BaseBackend, getCurrentHub } from '@sentry/core';
import { walk } from '@sentry/utils';
import { crashReporter, ipcRenderer } from 'electron';
import { getNameFallback, IPC_EVENT, IPC_PING, IPC_SCOPE } from '../common';
/** Timeout used for registering with the main process. */
var PING_TIMEOUT = 500;
/** Backend implementation for Electron renderer backends. */
var RendererBackend = /** @class */ (function (_super) {
    __extends(RendererBackend, _super);
    /** Creates a new Electron backend instance. */
    function RendererBackend(options) {
        var _this = this;
        if (options.enableJavaScript === false) {
            options.enabled = false;
        }
        _this = _super.call(this, options) || this;
        if (_this._isNativeEnabled()) {
            _this._installNativeHandler();
        }
        _this._pingMainProcess();
        _this._setupScopeListener();
        return _this;
    }
    /**
     * @inheritDoc
     */
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    RendererBackend.prototype.eventFromException = function (exception, hint) {
        return eventFromException(this._options, exception, hint);
    };
    /**
     * @inheritDoc
     */
    RendererBackend.prototype.eventFromMessage = function (message, level, hint) {
        return eventFromMessage(this._options, message, level, hint);
    };
    /**
     * @inheritDoc
     */
    RendererBackend.prototype.sendEvent = function (event) {
        // We pass through JSON because in Electron >= 8, IPC uses v8's structured clone algorithm and throws errors if
        // objects have functions. Calling walk makes sure to break circular references.
        ipcRenderer.send(IPC_EVENT, JSON.stringify(event, walk));
    };
    /**
     * Sends the scope to the main process once it updates.
     */
    RendererBackend.prototype._setupScopeListener = function () {
        var scope = getCurrentHub().getScope();
        if (scope) {
            scope.addScopeListener(function (updatedScope) {
                // We pass through JSON because in Electron >= 8, IPC uses v8's structured clone algorithm and throws errors if
                // objects have functions. Calling walk makes sure to break circular references.
                ipcRenderer.send(IPC_SCOPE, JSON.stringify(updatedScope, walk));
                scope.clearBreadcrumbs();
            });
        }
    };
    /** Returns whether native reports are enabled. */
    RendererBackend.prototype._isNativeEnabled = function () {
        // On macOS, we should start the Electron CrashReporter only in the main
        // process. It uses Crashpad internally, which will catch errors from all
        // sub processes thanks to out-of-processes crash handling. On other
        // platforms we need to start the CrashReporter in every sub process. For
        // more information see: https://goo.gl/nhqqwD
        if (process.platform === 'darwin') {
            return false;
        }
        // Mac AppStore builds cannot run the crash reporter due to the sandboxing
        // requirements. In this case, we prevent enabling native crashes entirely.
        // https://electronjs.org/docs/tutorial/mac-app-store-submission-guide#limitations-of-mas-build
        if (process.mas) {
            return false;
        }
        return this._options.enableNative !== false;
    };
    /** Activates the Electron CrashReporter. */
    RendererBackend.prototype._installNativeHandler = function () {
        // We will manually submit errors, but CrashReporter requires a submitURL in
        // some versions. Also, provide a productName and companyName, which we will
        // add manually to the event's context during submission.
        crashReporter.start({
            companyName: '',
            ignoreSystemCrashHandler: true,
            productName: this._options.appName || getNameFallback(),
            submitURL: '',
            uploadToServer: false,
        });
        return true;
    };
    /** Checks if the main processes is available and logs a warning if not. */
    RendererBackend.prototype._pingMainProcess = function () {
        // For whatever reason we have to wait PING_TIMEOUT until we send the ping
        // to main.
        setTimeout(function () {
            ipcRenderer.send(IPC_PING);
            var timeout = setTimeout(function () {
                // eslint-disable-next-line no-console
                console.warn('Could not connect to Sentry main process. Did you call init?');
            }, PING_TIMEOUT);
            ipcRenderer.on(IPC_PING, function () {
                clearTimeout(timeout);
            });
        }, PING_TIMEOUT);
    };
    return RendererBackend;
}(BaseBackend));
export { RendererBackend };
//# sourceMappingURL=backend.js.map